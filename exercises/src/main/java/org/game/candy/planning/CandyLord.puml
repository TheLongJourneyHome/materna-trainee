@startuml
'https://plantuml.com/class-diagram

Player "1" --> Bank : uses
Player o-- "*" Candy : Player owns some Candy
Location o-- Player : is in a Location (travels)
(Player, Location) .. Events : an Event may happen
Germany *-- "1" Bank : is located in
Days "1" -- "1" Events : after Event one day passed
CandyType -- Candy
Tradable <|.. Candy : is tradable
Bank <.. Days : <<call>>
Candy <.. Location : <<call>>

note "When a day passes Bank-interest-functions will trigger" as Note
Bank .. Note
Note .. Days

note "Location sets Candy price" as Note2
Candy .. Note2
Note2 .. Location

'Countries
Location <|-- Germany
Location <|-- Netherlands
Location <|-- Swiss
Location <|-- Italy
Location <|-- Japan
Location <|-- USA
'Candies
Candy <|-- Milka
Candy <|-- Stroopwafel
Candy <|-- Toblerone
Candy <|-- Giotto
Candy <|-- Pocky
Candy <|-- Skittles



interface Tradable {
+setPrice(): void
+getPrice(): Integer
}

enum CandyType {
CARAMELS
CHOCOLATE
GUMMIES
OTHER
}

abstract class Candy {
-name: String
-price: Integer
-weight: Integer = 1
-priceRange /'Random * range + minimum'/
-candyType: CandyType
-candyPopularity: String /'{"popular", "normal", "unpopular"} -> different random price ranges'/

+setName(): void
+getName(): String
+getWeight(): Integer
+setCandyType(CandyType candyType): void
+getCandyType(): CandyType
+setPopularity(String popularity): void
/'-setCandyPrice(): void
+getCandyPrice(): Integer'/
+setPriceRange()
}

abstract class Location {
-name: String
/'distance: Integer'/
-position: String /'eu, na, asia'/
'-candyPopularity: String /'{"popular", "normal", "unpopular"} -> different random price ranges'/
-travelPrice: Integer /'price to travel to location, always updates and changes depending on players location'/
#hasBank: Boolean = false

+setName(String name): void
+getName(): String
+setPosition(String position): void
+getPosition(): String
+setTravelPrice(String distance): void
+getTravelPrice(): Integer /'greater distance = more expensive'/
+getDistance(String position1, String position2): String /'check if eu && eu = close, eu && na = far...'/
+hasBank(): Boolean
'+setCandyPrice(): void
}

class Bank {
-money: Long = 0
-loan: Long = 0 /'cant borrow more than 2 digits greater and only when loan/debt is 0'/
-interestSavings: Double = 0.05 /'daily'/
-interestLoan: Double = 0.10 /'daily'/
-candyStash: Candy[]

/'change the bank attribute values inside the class -> void'/
'+setMoney(Long money): void
+getMoney(): Long
'+setLoan(Long loan): void
+getLoan(): Long
/'-increaseSavings(int money, double interestSaving): void '//'autocall when day passes'/
/'-increaseDebt(int debt, double interestLoaning): void'/
+increaseSavings(): void /'uses variables inside class as parameters, dont have to give arguments'/
+increaseDebt(): void
+depositMoney(Long money): void
+withdrawMoney(Long money): Long
+loanMoney(Long money): Long /'get loan int and give it to the player'/
+payOffLoan(Long money): void
}

class Events {
+moneyStolen(): Long
+findRandomCandy(): Candy
+hungryForRandomCandy(): Candy /'random, but more expensive = less likely'/
+findBigBag(): Integer /'only once per game, +50 inventory space, very rare 3%'/
+luckyDay(): Long /'find money if you have debt, amount is debt * 2 and has 1% trigger rate, if no loan then do nothing'/
+nothingHappens(): void
}

class Days {
-maxDays: Integer = 30
-currentDays: Integer
-daysLeft: Integer = maxDay - currentDays
/'1x travel = 1 day'/

+getMaxTimeLimit(): Integer
+oneDayPassed(): void
+getTimeLeft(): Integer
+updateWithInterest(): void /'call bank function that updates savings and debts'/
+endGame(): void
/'finalscore of profit - debts, but can't be smaller than 0'/
/'-> calls quitGame() in the end'/
}

class GeneralFunctions {
+quitGame(): void
+cancel(): void /'cancel action'/
}

class Player {
/'-playerName: String '//'for high score later'/
-cash: Long  = 2000
/'-debt: Long = 0 '//'just call bank variable to show it'/
-inventoryMax: Integer = 100
-inventoryOccupied: Integer
-inventorySpaceLeft: Integer /'inventoryMax - inventoryOccupied'/
-currentLocation: Location
-candyStash: Candy[]

+setCash(Long money): void
+getCash(): Integer
+setLoan(Long money): void
+getLoan(): Integer
+setInventoryMax(Integer increasedCapacity): void /'only happens when the player finds a bag in a rare event'/
+getInventoryMax(): Integer
+setInventoryOccupied(Integer numberOfItems): void
+getInventoryOccupied(): Integer
+setInventorySpaceLeft(): void
+getInventorySpaceLeft(): Integer
+setCurrentLocation(Location currentLocation): void
+getCurrentLocation(): Location
+setCandyStash(Candy[] candies): void
getCandyStash(): Candy[]
+travel(Location location): void /'price for distance travelled later called and will call events and ask for money'/
+buy(Candy candy): void /'add candy to the Candy list and substracts money from cash'/
+sell(Candy candy): void /'remove candy from Candy list and add money to cash'/
+visitBank(): void /'only available if the city has a bank'/
}


'Country instead of city
class Germany {
-hasBank: Boolean = true
/'Europ√§ische Zentralbank (Frankfurt am Main)'/
}

class Japan {
}

class USA {
}

class Italy {
}

class Netherlands {
}

class Swiss {
}


'Candies
class Milka {
'Germany
}

class Pocky {
'Japan
}

class Skittles {
'USA
}

class Giotto {
'Italy
}

class Stroopwafel {
'Netherlands
'Caramel between waffles
}

class Toblerone {
'Swiss
}

@enduml