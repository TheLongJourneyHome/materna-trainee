@startuml
'https://plantuml.com/class-diagram

Player "1" --> Bank : uses
Player o-- "*" Candy : Player owns some Candy
Location o-- Player : is in a Location (travels)
(Player, Location) .. Events : an Event may happen
Germany *-- "1" Bank : is located in
Days "1" -- "1" Events : after Event one day passed
CandyType -- Candy
Tradable <|.. Candy : is tradable
Bank <.. Days : <<instantiate>>

note "When a day passes Bank-interest-functions will trigger" as Note
Bank .. Note
Note .. Days

'Countries
Location <|-- Germany
Location <|-- Netherlands
Location <|-- Swiss
Location <|-- Italy
Location <|-- Japan
Location <|-- USA
'Candies
Candy <|-- Milka
Candy <|-- Stroopwafel
Candy <|-- Toblerone
Candy <|-- Giotto
Candy <|-- Pocky
Candy <|-- Skittles


interface Tradable {
setPrice(int price): void
getPrice(): Integer
}

enum CandyType {
CARAMELS
CHOCOLATE
GUMMIES
OTHER
}

abstract class Candy {
name: String
price: Integer
weight: Integer = 1
candyType: CandyType
}

abstract class Location {
name: String
/'distance: Integer'/
position: String
candyPopularity: String /'{"popular", "normal", "unpopular"} -> different random price ranges'/
price: Integer /'always updates and changes depending on players location'/
hasBank: Boolean = false

setPrice(): void
getPrice(): Integer /'greater distance = more expensive'/
getDistance(String location1, String location2): Integer /'check if eu && eu = close, eu && na = far...'/
}

class Bank {
money: Integer = 0
loan: Integer = 0
interestSaving: Double = 0.05 /'daily'/
interestLoaning: Double = 0.10 /'daily'/
candyStash: Candy[]

/'change the bank attribute values inside the class'/
increaseSavings(int money, double interestSaving): void
increaseDebt(int debt, double interestLoaning): void
depositMoney(): void
withdrawMoney(): void
loanMoney(): void
payOffLoan(): void
}

class Events {
moneyStolen(): Integer
findRandomCandy(): Candy
hungryForRandomCandy(): Candy /'random, but more expensive = less likely'/
findBigBag(): Integer /'only once per game, +50 inventory space, very rare 3%'/
luckyDay(): Integer /'find money if you have debt, amount is debt * 2 and has 1% trigger rate, if no loan then do nothing'/
nothingHappens(): void
}

class Days {
maxDay: Integer = 30
currentDays: Integer
daysLeft: Integer = maxDay - currentDays
/'1x travel = 1 day'/

endGame(): void
/'finalscore of profit - debts, but can't be smaller than 0'/
/'-> calls quitGame() in the end'/
}

class GeneralFunctions {
quitGame(): void
cancel(): void
}

class Player {
cash: Integer  = 2000
debt: Integer = 0
inventoryMax: Integer = 100
inventoryOccupied: Integer
inventorySpaceLeft: Integer = inventoryMax - inventoryOccupied
currentLocation: Location
candyStash: Candy[]

travel(Location city1, Location city2): Integer /'price for distance travelled'/
buy(Candy candy): void
sell(Candy candy): void

visitBank(): void /'only available if the city has a bank'/
}


'Country instead of city
class Germany {
hasBank: Boolean = true
/'Europ√§ische Zentralbank (Frankfurt am Main)'/
}

class Japan {
}

class USA {
}

class Italy {
}

class Netherlands {
}

class Swiss {
}


'Candies
class Milka {
'Germany
}

class Pocky {
'Japan
}

class Skittles {
'USA
}

class Giotto {
'Italy
}

class Stroopwafel {
'Netherlands
'Caramel between waffles
}

class Toblerone {
'Swiss
}

@enduml